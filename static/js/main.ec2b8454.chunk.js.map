{"version":3,"sources":["component/Data.js","component/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","className","colspan","data","map","datas","index","key","id","email","first_name","last_name","onClick","editButton","deleteButton","Form","style","marginLeft","formStatus","onSubmit","type","placeholder","name","value","onChange","onChangeHandler","required","disabled","buttonDisabled","App","event","setState","target","onSubmitHandler","e","preventDefault","payload","state","url","axios","post","then","response","push","catch","error","console","log","idSelected","put","findIndex","editButtonHandler","deleteButtonHandler","delete","status","splice","get","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec2b8454.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Data = (props) => (\r\n    <table className=\"table col-md-8 mx-auto\">\r\n    <thead>\r\n      <tr>\r\n       <th>id</th>\r\n       <th>email</th>\r\n       <th>first_name</th>\r\n       <th>last_name</th>\r\n       <th colspan=\"2\">OPSI</th>\r\n   </tr>\r\n    </thead>\r\n    { props.data.map((datas,index) =>(\r\n    <tbody key={datas.id} >\r\n        <tr>\r\n            <td>{datas.id}</td>\r\n            <td>{datas.email}</td>\r\n            <td>{datas.first_name}</td>\r\n            <td>{datas.last_name}</td>\r\n            <td><button className=\"btn btn-primary\" onClick={ ()=>props.editButton(datas) } >EDIT</button></td>\r\n            <td><button className=\"btn btn-danger\" onClick={ ()=>props.deleteButton(datas.id) }>DELETE</button></td>\r\n        </tr>\r\n    </tbody>\r\n    ) ) }\r\n    </table> \r\n)\r\n\r\n\r\nexport default Data;","import React from 'react';\r\n\r\nconst Form = (props) =>(\r\n        <div className=\"mt-5 mb-5 container\">\r\n            <h4 style={{marginLeft:\"400px\"}}> Form {props.formStatus}</h4>\r\n            <form onSubmit={props.onSubmit}>\r\n                <div className=\"form-row col-md-12 mx-auto\">\r\n                    <div className=\"col\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"email\" name=\"email\" value={props.email} onChange={props.onChangeHandler} />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                         <input  type=\"text\" className=\"form-control\" placeholder=\"first name\" name=\"first_name\"\r\n                          value={props.first_name} onChange={props.onChangeHandler} required />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <input type=\"text\" className=\"form-control\" \r\n                        placeholder=\"last Name\" name=\"last_name\" value={props.last_name} onChange={props.onChangeHandler} required />\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"submit\" className=\"btn btn-primary\" disabled={props.buttonDisabled} >Submit</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n)   \r\n\r\n\r\nexport default Form","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Data from './component/Data';\nimport Form from './component/Form/Form';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      data:[],\n      email:'',\n      first_name:'',\n      last_name:'',\n      formStatus:'create',\n      buttonDisabled:false,\n      idSelected:null\n    }\n  }\n\n  componentDidMount(){\n    var url='https://reqres.in/api/users?page=2'\n    axios.get(url).then( response =>{\n      //console.log(response.data.data)\n       this.setState({data:response.data.data})\n    } ).catch(error => { console.log(error) } )\n  }\n\n\n  onChangeHandler = (event) => {\n      this.setState({[event.target.name]:event.target.value})\n  }\n\n  onSubmitHandler = (e) =>{\n      e.preventDefault();\n      var payload = {\n          email : this.state.email,\n          first_name:this.state.first_name,\n          last_name : this.state.last_name\n      }\n      if(this.state.formStatus == 'create'){\n        var url = 'https://reqres.in/api/users'\n        this.setState({buttonDisabled:true})\n        axios.post(url,payload).then(response => { \n          var data = [...this.state.data];\n          data.push(response.data)\n          this.setState({data,email:'',first_name:'',last_name:'',buttonDisabled:false})\n         }).catch(error => {console.log(error)})\n      }else{\n        var id = this.state.idSelected\n        var url = `https://reqres.in/api/users/${id}`\n        this.setState({buttonDisabled:true})\n        axios.put(url,payload).then(response =>{\n          var data=[...this.state.data]\n          var index = data.findIndex( index => index.id == this.state.idSelected );\n          data[index].email = response.data.email\n          data[index].first_name = response.data.first_name\n          data[index].last_name = response.data.last_name\n          this.setState({data,email:'',first_name:'',last_name:'',buttonDisabled:false,idSelected:null})\n        }).catch(error=>{console.log(error)})\n\n      }\n  }\n\n  editButtonHandler= (data) =>{\n      this.setState({\n        email : data.email,\n        first_name:data.first_name,\n        last_name:data.last_name,\n        idSelected:data.id,\n        formStatus:'edit'\n      })\n  }\n\n  deleteButtonHandler = (id) =>{\n   var url=`https://reqres.in/api/users/${id}`\n    axios.delete(url).then(response =>{\n      if(response.status==204){\n          var data = [...this.state.data]\n          var index = data.findIndex( index => index.id == id )\n          data.splice(index,1);\n          this.setState({data})\n      }\n    }).catch(error=>{\n      console.log(error)\n    })\n  }\n\n\n  \n\n\n  render(){\n    return(\n      <div>\n        <Form \n              formStatus = {this.state.formStatus} \n              onSubmit={this.onSubmitHandler}\n               onChangeHandler={this.onChangeHandler}\n               email={this.state.email} \n               first_name={this.state.first_name} \n               last_name={this.state.last_name}\n               buttonDisabled={this.state.buttonDisabled}\n               />\n        <Data data={this.state.data} deleteButton = { (id) => this.deleteButtonHandler(id)} editButton={(data) => this.editButtonHandler(data) } />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}